server:
  port: 80

spring:
  application:
      name: microservice-provider-user
  jpa:
    generate-ddl: false
    show-sql: true
    hibernate:
      ddl-auto: none
  datasource:
    platform: h2
    schema: classpath:sql/schema.sql
    data: classpath:sql/data.sql


logging:
  level:
    root: INFO
    org.hibernate: INFO
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE

user:
  UserServiceUrl: http://localhost/user/

eureka:
  instance:
    hostname: localhost
  client:
    register-with-eureka: true  #是否将自己注册到Eureka Server
    fetch-registry: false #单节点，不需要同步其他Server数据
    service-url:
      defaultZone: http://${eureka.instance.hostname}/eureka

#info:
#  app:
#    name: @project.artifactId@
#    encoding: @project.build.sourceEncoding@
#    java:
#      source: @java.version@
#      target: @java.version@

#security:
#  basic:
#    enabled: true #开启基于HTTP basic 的认证
#  user:
#    name: user
#    password: 123


# 负载均衡
microservice-provider-user:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbanancer.BandomRule

# com.netflix.client.ClientException: Load balancer does not have available server for client：xxx
ribbon:
  eureka:
    enabled: true